Mindenki a https://github.com/neuron-training/java-ee-training.git alatt hozzon létre egy branch-t magának, ahová a kódot teszi majd.
Ne a java-training-examples repón dolgozzatok!!!!!!!!!!!!!! A fenti repón gyakoroltuk a Git használatát. Ide dolgozzatok.

Másoljátok ide az óran készített multimodule alkalmazást. Ezzel kell majd dolgoznotok.

Hozzatok létre két új modult.
-maven-multimodule-booking-core - adjátok hozzá a web-hez, mint függőség
-maven-multimodule-booking-api - adjátok hozzá a web-hez és a core-hoz mint függőség.

Ezekben a modulokban kell megvalósítani a múlt órán nézett design pattern-ek közül a Strategy Pattern-t, és az abban látott jegyfoglalós példát.

A feladat:
Amennyiban sikeres volt a bejelentkezés (beírtuk a felhasználó név jelszót), ezt követően írjuk ki, hogy milyen jegyeket lehet megvenni.
A jegyeket id-val azonosítjuk, tehát ezt kell bekérni a felhasználótól. Ezt követően kérjük be, hogy milyen eladón keresztül, és milyen fizetési móddal szeretné megvenni a jegyet. (A bekérdés hasonlóan történjen, mint a felhasználónév és jelszó bekérése).

Ehhez először is hozzunk létre egy jegy osztályt a booking-api modul, aminek 3 attribútuma van: id[String], eventName[String], cost[int]
Ehhez generáljunk egy mock-ot a bookin-core modulban a UsersMock-hoz hasonlóan. Legyen benne 5-6 jegy. 

Készítsünk egy BookingService interfészt a booking-api modulban, aminek két metódusa lesz.

-Collection<Ticket> getTickets();
-Ticket bookTicket(String id, MerchantType merchantType, PaymentType paymentType);

A getTickets() visszaadja a mock-ban található jegyeket. Ezt hívjuk majd meg felületről a jegyek kiírásához.

A bookTicket(...) metódus fogja elvégezni a jegy foglalását, fizetését. Ezt hívjuk meg a felületről, ha minden információt megadott a felhasználó.
-A MerchantType és a PaymentType egy-egy enum a booking-api-ban. Adjunk mindegyiknek legalább 3 értéket.
Ezen típusokhoz a booking-core-ba készítjük el az órai Strategy példához hasonlóan a Merchant absztrakt osztályból származó osztályokat (Tixa, TicketPortal, stb.), valamint a PaymentStrategy-hez  a megfelelő fizetési módokat (pl. Cash, PayPal stb.).
Hozzunk létre a booking-core a letrehozott Merchant-ekhez, és a PaymentStrategy-hez egy-egy factory-t, ami az enum értéke alapján visszaadja nekünk a tényleges implementációkat.

Implementáljuk a booking-core-ban a BookingService interfészt, és valósítsük meg.

A bookTicket metódus a megkapott paraméterek alapján először a Merchant factory segítségével előállítja a megfelelő Merchant-öt, majd a PaymentStrategy factory segítségével beállítja neki a megfelelő fizetési módot.

A Merchant osztályban a pay(int amout) metódust írjuk át bookTicket(String ticketId)-ra. Ezt követően hívjük meg ezt a metódust.
A metódusban keressük meg a fent elkészített TicketMock-ból az id-nak megfelelő jegyet, majd a Merchant-hez tartozó paymentStrategy-n keresztül fizessük ki a jegyet (hívjuk meg pay(int amout) metódus). A bookTicket metódus adja vissza a megkeresett jegyet, majd adjuk vissza a bookingService-ben is a jegyet. Majd a felületen írjük ki ennek a jegynek a részleteit.

A maven-multimodule-web készítsünk a ServiceLocator osztályba egy új metódust, ami a BookinService interfészhez visszaadja nekünk a hozzá tartozó implementációt. Hasonlóan az getDatabaseAuthenticatorService() és getLDAPAuthenticatorService()-hez. Ezen keresztül hívjük meg a web-ről a megfelelő metódusokat.
